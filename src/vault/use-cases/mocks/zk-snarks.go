// Code generated by MockGen. DO NOT EDIT.
// Source: zk-snarks.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "github.com/ConsenSys/orchestrate-hashicorp-vault-plugin/src/vault/entities"
	usecases "github.com/ConsenSys/orchestrate-hashicorp-vault-plugin/src/vault/use-cases"
	gomock "github.com/golang/mock/gomock"
	logical "github.com/hashicorp/vault/sdk/logical"
	reflect "reflect"
)

// MockZkSnarksUseCases is a mock of ZkSnarksUseCases interface
type MockZkSnarksUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockZkSnarksUseCasesMockRecorder
}

// MockZkSnarksUseCasesMockRecorder is the mock recorder for MockZkSnarksUseCases
type MockZkSnarksUseCasesMockRecorder struct {
	mock *MockZkSnarksUseCases
}

// NewMockZkSnarksUseCases creates a new mock instance
func NewMockZkSnarksUseCases(ctrl *gomock.Controller) *MockZkSnarksUseCases {
	mock := &MockZkSnarksUseCases{ctrl: ctrl}
	mock.recorder = &MockZkSnarksUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZkSnarksUseCases) EXPECT() *MockZkSnarksUseCasesMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockZkSnarksUseCases) CreateAccount() usecases.CreateAccountUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount")
	ret0, _ := ret[0].(usecases.CreateAccountUseCase)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockZkSnarksUseCasesMockRecorder) CreateAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockZkSnarksUseCases)(nil).CreateAccount))
}

// MockCreateBN256AccountUseCase is a mock of CreateBN256AccountUseCase interface
type MockCreateBN256AccountUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateBN256AccountUseCaseMockRecorder
}

// MockCreateBN256AccountUseCaseMockRecorder is the mock recorder for MockCreateBN256AccountUseCase
type MockCreateBN256AccountUseCaseMockRecorder struct {
	mock *MockCreateBN256AccountUseCase
}

// NewMockCreateBN256AccountUseCase creates a new mock instance
func NewMockCreateBN256AccountUseCase(ctrl *gomock.Controller) *MockCreateBN256AccountUseCase {
	mock := &MockCreateBN256AccountUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateBN256AccountUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateBN256AccountUseCase) EXPECT() *MockCreateBN256AccountUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateBN256AccountUseCase) Execute(ctx context.Context, namespace string) (*entities.ZksAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, namespace)
	ret0, _ := ret[0].(*entities.ZksAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockCreateBN256AccountUseCaseMockRecorder) Execute(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateBN256AccountUseCase)(nil).Execute), ctx, namespace)
}

// WithStorage mocks base method
func (m *MockCreateBN256AccountUseCase) WithStorage(storage logical.Storage) usecases.CreateZksAccountUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStorage", storage)
	ret0, _ := ret[0].(usecases.CreateZksAccountUseCase)
	return ret0
}

// WithStorage indicates an expected call of WithStorage
func (mr *MockCreateBN256AccountUseCaseMockRecorder) WithStorage(storage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStorage", reflect.TypeOf((*MockCreateBN256AccountUseCase)(nil).WithStorage), storage)
}
